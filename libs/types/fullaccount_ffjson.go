// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: fullaccount.go

package types

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *AccountInfo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AccountInfo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"account":`)

	{

		err = j.Account.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"registrar_name":`)

	{

		obj, err = j.RegistrarName.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"referrer_name":`)

	{

		obj, err = j.ReferrerName.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"lifetime_referrer_name":`)

	{

		obj, err = j.LifetimeReferrerName.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	/* Struct fall back. type=types.VestingBalance kind=struct */
	buf.WriteString(`,"cashback_balance":`)
	err = buf.Encode(&j.CashbackBalance)
	if err != nil {
		return err
	}
	buf.WriteString(`,"balances":`)
	if j.Balances != nil {
		buf.WriteString(`[`)
		for i, v := range j.Balances {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"vesting_balances":`)
	if j.VestingBalances != nil {
		buf.WriteString(`[`)
		for i, v := range j.VestingBalances {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Struct fall back. type=types.VestingBalance kind=struct */
			err = buf.Encode(&v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"limit_orders":`)
	if j.LimitOrders != nil {
		buf.WriteString(`[`)
		for i, v := range j.LimitOrders {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Struct fall back. type=types.LimitOrder kind=struct */
			err = buf.Encode(&v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"call_orders":`)
	if j.CallOrders != nil {
		buf.WriteString(`[`)
		for i, v := range j.CallOrders {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"settle_orders":`)
	if j.SettleOrders != nil {
		buf.WriteString(`