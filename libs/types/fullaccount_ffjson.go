// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: fullaccount.go

package types

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *AccountInfo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AccountInfo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"account":`)

	{

		err = j.Account.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"registrar_name":`)

	{

		obj, err = j.RegistrarName.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"referrer_name":`)

	{

		obj, err = j.ReferrerName.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"lifetime_referrer_name":`)

	{

		obj, err = j.LifetimeReferrerName.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	/* Struct fall back. type=types.VestingBalance kind=struct */
	buf.WriteString(`,"cashback_balance":`)
	err = buf.Encode(&j.CashbackBalance)
	if err != nil {
		return err
	}
	buf.WriteString(`,"balances":`)
	if j.Balances != nil {
		buf.WriteString(`[`)
		for i, v := range j.Balances {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"vesting_balances":`)
	if j.VestingBalances != nil {
		buf.WriteString(`[`)
		for i, v := range j.VestingBalances {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Struct fall back. type=types.VestingBalance kind=struct */
			err = buf.Encode(&v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"limit_orders":`)
	if j.LimitOrders != nil {
		buf.WriteString(`[`)
		for i, v := range j.LimitOrders {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Struct fall back. type=types.LimitOrder kind=struct */
			err = buf.Encode(&v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"call_orders":`)
	if j.CallOrders != nil {
		buf.WriteString(`[`)
		for i, v := range j.CallOrders {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"settle_orders":`)
	if j.SettleOrders != nil {
		buf.WriteString(`[`)
		for i, v := range j.SettleOrders {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"statistics":`)

	{

		err = j.Statistics.MarshalJSONBuf(buf)
		if err != nil {
			return err
		}

	}
	buf.WriteString(`,"assets":`)
	if j.Assets != nil {
		buf.WriteString(`[`)
		for i, v := range j.Assets {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				obj, err = v.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtAccountInfobase = iota
	ffjtAccountInfonosuchkey

	ffjtAccountInfoAccount

	ffjtAccountInfoRegistrarName

	ffjtAccountInfoReferrerName

	ffjtAccountInfoLifetimeReferrerName

	ffjtAccountInfoCashbackBalance

	ffjtAccountInfoBalances

	ffjtAccountInfoVestingBalances

	ffjtAccountInfoLimitOrders

	ffjtAccountInfoCallOrders

	ffjtAccountInfoSettleOrders

	ffjtAccountInfoStatistics

	ffjtAccountInfoAssets
)

var ffjKeyAccountInfoAccount = []byte("account")

var ffjKeyAccountInfoRegistrarName = []byte("registrar_name")

var ffjKeyAccountInfoReferrerName = []byte("referrer_name")

var ffjKeyAccountInfoLifetimeReferrerName = []byte("lifetime_referrer_name")

var ffjKeyAccountInfoCashbackBalance = []byte("cashback_balance")

var ffjKeyAccountInfoBalances = []byte("balances")

var ffjKeyAccountInfoVestingBalances = []byte("vesting_balances")

var ffjKeyAccountInfoLimitOrders = []byte("limit_orders")

var ffjKeyAccountInfoCallOrders = []byte("call_orders")

var ffjKeyAccountInfoSettleOrders = []byte("settle_orders")

var ffjKeyAccountInfoStatistics = []byte("statistics")

var ffjKeyAccountInfoAssets = []byte("assets")

// UnmarshalJSON umarshall json - template of ffjson
func (j *AccountInfo) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *AccountInfo) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtAccountInfobase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtAccountInfonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyAccountInfoAccount, kn) {
						currentKey = ffjtAccountInfoAccount
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAccountInfoAssets, kn) {
						currentKey = ffjtAccountInfoAssets
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'b':

					if bytes.Equal(ffjKeyAccountInfoBalances, kn) {
						currentKey = ffjtAccountInfoBalances
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyAccountInfoCashbackBalance, kn) {
						currentKey = ffjtAccountInfoCashbackBalance
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAccountInfoCallOrders, kn) {
						currentKey = ffjtAccountInfoCallOrders
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyAccountInfoLifetimeReferrerName, kn) {
						currentKey = ffjtAccountInfoLifetimeReferrerName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAccountInfoLimitOrders, kn) {
						currentKey = ffjtAccountInfoLimitOrders
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffjKeyAccountInfoRegistrarName, kn) {
						currentKey = ffjtAccountInfoRegistrarName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAccountInfoReferrerName, kn) {
						currentKey = ffjtAccountInfoReferrerName
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyAccountInfoSettleOrders, kn) {
						currentKey = ffjtAccountInfoSettleOrders
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAccountInfoStatistics, kn) {
						currentKey = ffjtAccountInfoStatistics
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyAccountInfoVestingBalances, kn) {
						currentKey = ffjtAccountInfoVestingBalances
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoAssets, kn) {
					currentKey = ffjtAccountInfoAssets
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoStatistics, kn) {
					currentKey = ffjtAccountInfoStatistics
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoSettleOrders, kn) {
					currentKey = ffjtAccountInfoSettleOrders
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoCallOrders, kn) {
					currentKey = ffjtAccountInfoCallOrders
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoLimitOrders, kn) {
					currentKey = ffjtAccountInfoLimitOrders
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoVestingBalances, kn) {
					currentKey = ffjtAccountInfoVestingBalances
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoBalances, kn) {
					currentKey = ffjtAccountInfoBalances
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoCashbackBalance, kn) {
					currentKey = ffjtAccountInfoCashbackBalance
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyAccountInfoLifetimeReferrerName, kn) {
					currentKey = ffjtAccountInfoLifetimeReferrerName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyAccountInfoReferrerName, kn) {
					currentKey = ffjtAccountInfoReferrerName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAccountInfoRegistrarName, kn) {
					currentKey = ffjtAccountInfoRegistrarName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyAccountInfoAccount, kn) {
					currentKey = ffjtAccountInfoAccount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtAccountInfonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTo