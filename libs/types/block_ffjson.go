// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: block.go

package types

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *Block) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Block) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"witness":`)

	{

		obj, err = j.Witness.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"transaction_merkle_root":`)

	{

		obj, err = j.TransactionMerkleRoot.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"witness_signature":`)

	{

		obj, err = j.WitnessSignature.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"previous":`)

	{

		obj, err = j.Previous.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"block_id":`)

	{

		obj, err = j.BlockID.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"timestamp":`)

	{

		obj, err = j.TimeStamp.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteByte(',')
	if j.SigningKey != nil {
		if true {
			buf.WriteString(`"signing_key":`)

			{

				obj, err = j.SigningKey.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"transactions":`)
	if j.Transactions != nil {
		buf.WriteString(`[`)
		for i, v := range j.Transactions {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Struct fall back. type=types.SignedTransaction kind=struct */
			err = buf.Encode(&v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"transaction_ids":`)
	if j.TransactionIDs != nil {
		buf.WriteString(`[`)
		for i, v := range j.TransactionIDs {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				obj, err = v.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"extensions":`)

	{

		obj, err = j.Extensions.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtBlockbase = iota
	ffjtBlocknosuchkey

	ffjtBlockWitness

	ffjtBlockTransactionMerkleRoot

	ffjtBlockWitnessSignature

	ffjtBlockPrevious

	ffjtBlockBlockID

	ffjtBlockTimeStamp

	ffjtBlockSigningKey

	ffjtBlockTransactions

	ffjtBlockTransactionIDs

	ffjtBlockExtensions
)

var ffjKeyBlockWitness = []byte("witness")

var ffjKeyBlockTransactionMerkleRoot = []byte("transaction_merkle_root")

var ffjKeyBlockWitnessSignature = []byte("witness_signature")

var ffjKeyBlockPrevious = []byte("previous")

var ffjKeyBlockBlockID = []byte("block_id")

var ffjKeyBlockTimeStamp = []byte("timestamp")

var ffjKeyBlockSigningKey = []byte("signing_key")

var ffjKeyBlockTransactions = []byte("transactions")

var ffjKeyBlockTransactionIDs = []byte("transaction_ids")

var ffjKeyBlockExtensions = []byte("extensions")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Block) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Block) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtBlockbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtBlocknosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'b':

					if bytes.Equal(ffjKeyBlockBlockID, kn) {
						currentKey = ffjtBlockBlockID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyBlockExtensions, kn) {
						currentKey = ffjtBlockExtensions
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyBlockPrevious, kn) {
						currentKey = ffjtBlockPrevious
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyBlockSigningKey, kn) {
						currentKey = ffjtBlockSigningKey
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyBlockTransactionMerkleRoot, kn) {
						currentKey = ffjtBlockTransactionMerkleRoot
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBlockTimeStamp, kn) {
						currentKey = ffjtBlockTimeStamp
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBlockTransactions, kn) {
						currentKey = ffjtBlockTransactions
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBlockTransactionIDs, kn) {
						currentKey = ffjtBlockTransactionIDs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyBlockWitness, kn) {
						currentKey = ffjtBlockWitness
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBlockWitnessSignature, kn) {
						currentKey = ffjtBlockWitnessSignature
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyBlockExtensions, kn) {
					currentKey = ffjtBlockExtensions
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockTransactionIDs, kn) {
					currentKey = ffjtBlockTransactionIDs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockTransactions, kn) {
					currentKey = ffjtBlockTransactions
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockSigningKey, kn) {
					currentKey = ffjtBlockSigningKey
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockTimeStamp, kn) {
					currentKey = ffjtBlockTimeStamp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockBlockID, kn) {
					currentKey = ffjtBlockBlockID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockPrevious, kn) {
					currentKey = ffjtBlockPrevious
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockWitnessSignature, kn) {
					currentKey = ffjtBlockWitnessSignature
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockTransactionMerkleRoot, kn) {
					currentKey = ffjtBlockTransactionMerkleRoot
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyBlockWitness, kn) {
					currentKey = ffjtBlockWitness
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtBlocknosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtBlockWitness:
					goto handle_Witness

				case ffjtBlockTransactionMerkleRoot:
					goto handle_TransactionMerkleRoot

				case ffjtBlockWitnessSignature:
					goto handle_WitnessSignature

				case ffjtBlockPrevious:
					goto handle_Previous

				case ffjtBlockBlockID:
					goto handle_BlockID

				case ffjtBlockTimeStamp:
					goto handle_TimeStamp

				case ffjtBlockSigningKey:
					goto handle_SigningKey

				case ffjtBlockTransactions:
					goto handle_Transactions

				case ffjtBlockTransactionIDs:
					goto handle_TransactionIDs

				case ffjtBlockExtensions:
					goto handle_Extensions

				case ffjtBlocknosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Witness:

	/* handler: j.Witness type=types.WitnessID kind=struct quoted=false*/

	{
		if tok == fflib.F