
// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: assetcreateoperation.go

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *AssetCreateOperation) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *AssetCreateOperation) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if j.BitassetOptions != nil {
		/* Struct fall back. type=types.BitassetOptions kind=struct */
		buf.WriteString(`{ "bitasset_opts":`)
		err = buf.Encode(j.BitassetOptions)
		if err != nil {
			return err
		}
	} else {
		buf.WriteString(`{ "bitasset_opts":null`)
	}
	/* Struct fall back. type=types.AssetOptions kind=struct */
	buf.WriteString(`,"common_options":`)
	err = buf.Encode(&j.CommonOptions)
	if err != nil {
		return err
	}
	buf.WriteString(`,"extensions":`)

	{

		obj, err = j.Extensions.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	if j.IsPredictionMarket {
		buf.WriteString(`,"is_prediction_market":true`)
	} else {
		buf.WriteString(`,"is_prediction_market":false`)
	}
	buf.WriteString(`,"issuer":`)

	{

		obj, err = j.Issuer.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"precision":`)
	fflib.FormatBits2(buf, uint64(j.Precision), 10, false)
	buf.WriteString(`,"symbol":`)

	{

		obj, err = j.Symbol.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteByte(',')
	if j.Fee != nil {
		if true {
			/* Struct fall back. type=types.AssetAmount kind=struct */
			buf.WriteString(`"fee":`)
			err = buf.Encode(j.Fee)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtAssetCreateOperationbase = iota
	ffjtAssetCreateOperationnosuchkey

	ffjtAssetCreateOperationBitassetOptions

	ffjtAssetCreateOperationCommonOptions

	ffjtAssetCreateOperationExtensions

	ffjtAssetCreateOperationIsPredictionMarket

	ffjtAssetCreateOperationIssuer

	ffjtAssetCreateOperationPrecision

	ffjtAssetCreateOperationSymbol

	ffjtAssetCreateOperationFee
)

var ffjKeyAssetCreateOperationBitassetOptions = []byte("bitasset_opts")

var ffjKeyAssetCreateOperationCommonOptions = []byte("common_options")

var ffjKeyAssetCreateOperationExtensions = []byte("extensions")

var ffjKeyAssetCreateOperationIsPredictionMarket = []byte("is_prediction_market")

var ffjKeyAssetCreateOperationIssuer = []byte("issuer")

var ffjKeyAssetCreateOperationPrecision = []byte("precision")

var ffjKeyAssetCreateOperationSymbol = []byte("symbol")

var ffjKeyAssetCreateOperationFee = []byte("fee")

// UnmarshalJSON umarshall json - template of ffjson
func (j *AssetCreateOperation) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *AssetCreateOperation) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtAssetCreateOperationbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtAssetCreateOperationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'b':

					if bytes.Equal(ffjKeyAssetCreateOperationBitassetOptions, kn) {
						currentKey = ffjtAssetCreateOperationBitassetOptions
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyAssetCreateOperationCommonOptions, kn) {
						currentKey = ffjtAssetCreateOperationCommonOptions
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyAssetCreateOperationExtensions, kn) {
						currentKey = ffjtAssetCreateOperationExtensions
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeyAssetCreateOperationFee, kn) {
						currentKey = ffjtAssetCreateOperationFee
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyAssetCreateOperationIsPredictionMarket, kn) {
						currentKey = ffjtAssetCreateOperationIsPredictionMarket
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyAssetCreateOperationIssuer, kn) {
						currentKey = ffjtAssetCreateOperationIssuer
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyAssetCreateOperationPrecision, kn) {
						currentKey = ffjtAssetCreateOperationPrecision
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyAssetCreateOperationSymbol, kn) {
						currentKey = ffjtAssetCreateOperationSymbol
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyAssetCreateOperationFee, kn) {
					currentKey = ffjtAssetCreateOperationFee
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAssetCreateOperationSymbol, kn) {
					currentKey = ffjtAssetCreateOperationSymbol
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyAssetCreateOperationPrecision, kn) {
					currentKey = ffjtAssetCreateOperationPrecision