
// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: transfertoblindoperation.go

package operations

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/Assetsadapter/whitecoin-adapter/libs/types"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *TransferToBlindOperation) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *TransferToBlindOperation) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	/* Struct fall back. type=types.AssetAmount kind=struct */
	buf.WriteString(`{ "amount":`)
	err = buf.Encode(&j.Amount)
	if err != nil {
		return err
	}
	buf.WriteString(`,"blinding_factor":`)

	{

		obj, err = j.BlindingFactor.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"from":`)

	{

		obj, err = j.From.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"outputs":`)
	if j.Outputs != nil {
		buf.WriteString(`[`)
		for i, v := range j.Outputs {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Struct fall back. type=types.BlindOutput kind=struct */
			err = buf.Encode(&v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte(',')
	if j.Fee != nil {
		if true {
			/* Struct fall back. type=types.AssetAmount kind=struct */
			buf.WriteString(`"fee":`)
			err = buf.Encode(j.Fee)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtTransferToBlindOperationbase = iota
	ffjtTransferToBlindOperationnosuchkey

	ffjtTransferToBlindOperationAmount

	ffjtTransferToBlindOperationBlindingFactor

	ffjtTransferToBlindOperationFrom

	ffjtTransferToBlindOperationOutputs

	ffjtTransferToBlindOperationFee
)

var ffjKeyTransferToBlindOperationAmount = []byte("amount")

var ffjKeyTransferToBlindOperationBlindingFactor = []byte("blinding_factor")

var ffjKeyTransferToBlindOperationFrom = []byte("from")

var ffjKeyTransferToBlindOperationOutputs = []byte("outputs")

var ffjKeyTransferToBlindOperationFee = []byte("fee")

// UnmarshalJSON umarshall json - template of ffjson
func (j *TransferToBlindOperation) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *TransferToBlindOperation) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtTransferToBlindOperationbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtTransferToBlindOperationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyTransferToBlindOperationAmount, kn) {
						currentKey = ffjtTransferToBlindOperationAmount
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'b':

					if bytes.Equal(ffjKeyTransferToBlindOperationBlindingFactor, kn) {
						currentKey = ffjtTransferToBlindOperationBlindingFactor
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffjKeyTransferToBlindOperationFrom, kn) {
						currentKey = ffjtTransferToBlindOperationFrom
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyTransferToBlindOperationFee, kn) {
						currentKey = ffjtTransferToBlindOperationFee
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'o':

					if bytes.Equal(ffjKeyTransferToBlindOperationOutputs, kn) {
						currentKey = ffjtTransferToBlindOperationOutputs
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferToBlindOperationFee, kn) {
					currentKey = ffjtTransferToBlindOperationFee
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyTransferToBlindOperationOutputs, kn) {
					currentKey = ffjtTransferToBlindOperationOutputs
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferToBlindOperationFrom, kn) {
					currentKey = ffjtTransferToBlindOperationFrom
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffjKeyTransferToBlindOperationBlindingFactor, kn) {
					currentKey = ffjtTransferToBlindOperationBlindingFactor
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyTransferToBlindOperationAmount, kn) {
					currentKey = ffjtTransferToBlindOperationAmount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtTransferToBlindOperationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue